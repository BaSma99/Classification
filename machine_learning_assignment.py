# -*- coding: utf-8 -*-
"""Machine_learning_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ekVNTBODBR8ZbzxBvbNqwMGYjl3Tj5j
"""

! pip uninstall xlrd

! pip install xlrd

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns # Python data visualization library built on top of Matplotlib.
import pandas as pd #data analysis library into your current environment. 
import matplotlib.pyplot as plt #collection of command style functions that make matplotlib work like MATLAB.
import numpy as np
# %matplotlib inline

"""#read training dataset and prepare it"""

from google.colab import files
files.upload()

#read the train dataset
df = pd.read_excel('Data_User_Modeling_Dataset_Hamdi Tolga KAHRAMAN.xls',sheet_name='Training_Data')

df.head()

df.info()

df.columns

#Trim Both leading and trailing space of column in pandas 
df.columns = df.columns.str.strip()

df = df[['STG','SCG','STR','LPR','PEG','UNS']]

df.head() #final result of dataframe after preparing label

#count number of values in UNS column
df.UNS.value_counts()

#print the count plot figure of UNS column
sns.countplot(df.UNS)

#label encoding of UNS label
encoding = {'very_low': 1 ,'Low': 2 ,'Middle' : 3 ,'High': 4}
df.UNS = df.UNS.map(encoding)

#print head of data after performing label encoding
df.head()

#print pairplot of the data to show the pairwise relationships in a dataset.
sns.pairplot(df,hue = 'UNS',diag_kind='kde')

#by using scatterplot to divide all classes into different colors.
plt.figure(figsize=[15,8])
sns.scatterplot(x='PEG',y='LPR',hue='UNS',data=df)
plt.title('PEG Vs LPR')

x_train = df[['PEG','LPR']]
y_train = df['UNS']

"""#read testing dataset and prepare it"""

#read the test dataset
df_test = pd.read_excel('/content/Data_User_Modeling_Dataset_Hamdi Tolga KAHRAMAN.xls',sheet_name='Test_Data')

#print the head of the test dataset
df_test.head()

#show the countplot diagran of UNS column in the test dataset
sns.countplot(df_test[' UNS'])

#count UNS column in test dataset
df_test[' UNS'].value_counts()

#encoding values of UNS
encoding_test = {'Very Low': 1 ,'Low': 2 ,'Middle' : 3 ,'High': 4}

df_test[' UNS'] = df_test[' UNS'].map(encoding_test)

df_test[' UNS'].value_counts()

#split test dataset
x_test= df_test[['PEG','LPR']]
y_test = df_test[' UNS']

#show the scatter plot of PEG&LDR and UNS column
plt.figure(figsize=[15,8])
sns.scatterplot(x='PEG',y='LPR',hue=' UNS',data=df_test)
plt.title('PEG Vs LPR')

"""#Implementing support vector machine classification model"""

from sklearn.svm import SVC #import C-Support Vector Classification.
svm = SVC()
svm.fit(x_train,y_train) #to fit SVM classifier algorithm to the training dataset

#define the prediction label
y_pred = svm.predict(x_test)

from sklearn.metrics import classification_report,plot_confusion_matrix #to print the classification report and confusion matrix
print(classification_report(svm.predict(x_train),y_train))

#to print the confusion matrix for training dataset for SVM
plot_confusion_matrix(svm,x_train,y_train)

#to print the classification report of the prediction label for SVM
print(classification_report(y_test,y_pred))

#to print the confusion matrix for testing dataset for SVM
plot_confusion_matrix(svm,x_test,y_test)

x_train

"""# Decision boundries for training"""

#define a function to make the mesh grid
def make_meshgrid(x, y, h=.02):
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    return xx, yy
#define a function to make the contour plot
def plot_contours(ax, clf, xx, yy, **params):
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out

fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of rbf SVC training')
# Set-up grid for plotting.
X0, X1 = x_train['PEG'], x_train['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train, cmap=plt.cm.coolwarm, s=30, edgecolors='k')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['very law : V','Low : VO' , 'Middle : O' ,'High : R'])
plt.show()

"""# Decision boundries for test"""

fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of rbf SVC test ')
# Set-up grid for plotting.
X0, X1 = x_test['PEG'], x_test['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test, cmap=plt.cm.coolwarm, s=30, edgecolors='k')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['very law : V','Low : VO' , 'Middle : O' ,'High : R'])
plt.show()

"""#Implementing Multi-layer Perceptron classifier

"""

from sklearn.neural_network import MLPClassifier #to import Multi-layer Perceptron classifier library
pc = MLPClassifier()
pc.fit(x_train,y_train)

y_pred_pc = pc.predict(x_test)

#print the classification report of MLPClassifier for training dataset
print(classification_report(pc.predict(x_train),y_train))

#print the classification report of MLPClassifier for testing dataset
print(classification_report(y_pred_pc,y_test))

#show the confusion matrix of Multi-layer Perceptron classifier for training dataset
plot_confusion_matrix(pc,x_train,y_train)

#show the confusion matrix of Multi-layer Perceptron classifier for testing dataset
plot_confusion_matrix(pc,x_test,y_test)

#print decision boundry of MLPClassifier for training dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP train ')
# Set-up grid for plotting.
X0, X1 = x_train['PEG'], x_train['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train, cmap=plt.cm.coolwarm, s=30, edgecolors='k')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['very law : V','Low : VO' , 'Middle : O' ,'High : R'])
plt.show()

#print decision boundry of MLPClassifier for testing dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP test ')
# Set-up grid for plotting.
X0, X1 = x_test['PEG'], x_test['LPR']
xx, yy = make_meshgrid(X0, X1)
plot_contours(ax, pc.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test, cmap=plt.cm.coolwarm, s=30, edgecolors='k')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['very law : V','Low : VO' , 'Middle : O' ,'High : R'])
plt.show()

"""##Implementing One-vs-the-rest (OvR) multiclass strategy."""

#take a copy from the dataset
df_1 = df.copy()

#print dataset 
df_1

#take a copy from the test data
df_test_1 = df_test.copy()

#print testing dataset 
df_test_1

"""#One-vs-the-rest (OvR) for class 1




"""

#training data for ovr 1 
x_train_ovr_1 = df_1[['PEG','LPR']]

y_train_ovr_1 = df_1['UNS'].map({4 : 1, 3 : 0, 2 : 0, 1 : 0})# High = 1 All = 0
print(y_train_ovr_1)

#count the values of y data for training One-vs-the-rest (OvR) multiclass strategy.
y_train_ovr_1.value_counts()

#testing data for ovr 1 
x_test_ovr_1 = df_test_1[['PEG','LPR']]

y_test_ovr_1 = df_test_1[' UNS'].map({4 : 1, 3 : 0, 2 : 0, 1 : 0})

#count the values of y data for testing One-vs-the-rest (OvR) multiclass strategy.
y_test_ovr_1.value_counts()

svm_ovr_1 = SVC() # High = 1 All = 0
svm_ovr_1.fit(x_train_ovr_1,y_train_ovr_1)

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for training dataset
print(classification_report(y_train_ovr_1,svm_ovr_1.predict(x_train_ovr_1)))

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for testing dataset
print(classification_report(y_test_ovr_1,svm_ovr_1.predict(x_test_ovr_1)))

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for training dataset
plot_confusion_matrix(svm_ovr_1,x_train_ovr_1,y_train_ovr_1)

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for testing dataset
plot_confusion_matrix(svm_ovr_1,x_test_ovr_1,y_test_ovr_1)

#print decision boundry of SVM for training dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm train OVR ')
# Set-up grid for plotting.
X0, X1 = x_train_ovr_1['PEG'], x_train_ovr_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_1.fit(x_train_ovr_1, y_train_ovr_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovr_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'High : R'])
plt.show()

#print decision boundry of SVM for testing dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of Test SVM OVR ')
# Set-up grid for plotting.
X0, X1 = x_test_ovr_1['PEG'], x_test_ovr_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_1.fit(x_train_ovr_1, y_train_ovr_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovr_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'High : R'])
plt.show()

score_1 = svm_ovr_1.score(x_test_ovr_1,y_test_ovr_1)

"""#One-vs-the-rest (OvR) for class 2"""

#training data for ovr 2
x_train_ovr_2 = df_1[['PEG','LPR']]
y_train_ovr_2 = df_1['UNS'].map({4 : 0, 3 : 0, 2 : 0, 1 : 1})

#testing data for ovr 2
x_test_ovr_2 = df_test_1[['PEG','LPR']]
y_test_ovr_2 = df_test_1[' UNS'].map({4 : 0, 3 : 0, 2 : 0, 1 : 1})# Very Low = 1 All = 0

#count the values of y data for training One-vs-the-rest (OvR) multiclass strategy.
y_train_ovr_2.value_counts()

#count the values of y data for testing One-vs-the-rest (OvR) multiclass strategy.
y_test_ovr_2.value_counts()

svm_ovr_2 = SVC()
svm_ovr_2.fit(x_train_ovr_2,y_train_ovr_2)

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for training 2 dataset
print(classification_report(y_train_ovr_2,svm_ovr_2.predict(x_train_ovr_2)))

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for testing 2 dataset
print(classification_report(y_test_ovr_2,svm_ovr_2.predict(x_test_ovr_2)))

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for training 2 dataset
plot_confusion_matrix(svm_ovr_2,x_train_ovr_2,y_train_ovr_2)

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for testing 2 dataset
plot_confusion_matrix(svm_ovr_2,x_test_ovr_2,y_test_ovr_2)

#print decision boundry of SVM for training 2 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm train OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovr_2['PEG'], x_train_ovr_2['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_2.fit(x_train_ovr_2, y_train_ovr_2), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovr_2, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Very Low : R'])
plt.show()

#print decision boundry of SVM for testing 2 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of Test SVM OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovr_2['PEG'], x_test_ovr_2['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_2.fit(x_train_ovr_2, y_train_ovr_2), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovr_2, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Very Low : R'])
plt.show()

#calculate accuracy of class 2
score_2 = svm_ovr_2.score(x_test_ovr_2,y_test_ovr_2)

#print accuracy of class 2
score_2

"""#One-vs-the-rest (OvR) for class 3"""

#training data for ovr 3
x_train_ovr_3 = df_1[['PEG','LPR']]
y_train_ovr_3 = df_1['UNS'].map({4 : 0, 3 : 0, 2 : 1, 1 : 0})

#testing data for ovr 3
x_test_ovr_3 = df_test_1[['PEG','LPR']] # Low= 1 All = 0
y_test_ovr_3 = df_test_1[' UNS'].map({4 : 0, 3 : 0, 2 : 1, 1 : 0})

#count the values of y data for training One-vs-the-rest (OvR) multiclass strategy.
y_train_ovr_3.value_counts()

#count the values of y data for testing One-vs-the-rest (OvR) multiclass strategy.
y_test_ovr_3.value_counts()

svm_ovr_3 = SVC()
svm_ovr_3.fit(x_train_ovr_3,y_train_ovr_3)

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for training 3 dataset
print(classification_report(y_train_ovr_3,svm_ovr_3.predict(x_train_ovr_3)))

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for testing 3 dataset
print(classification_report(y_test_ovr_3,svm_ovr_3.predict(x_test_ovr_3)))

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for training 3 dataset
plot_confusion_matrix(svm_ovr_3,x_train_ovr_3,y_train_ovr_3)

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for testing 3 dataset
plot_confusion_matrix(svm_ovr_3,x_test_ovr_3,y_test_ovr_3)

#print decision boundry of SVM for training 3 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm train OVR_3 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovr_3['PEG'], x_train_ovr_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_3.fit(x_train_ovr_3, y_train_ovr_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovr_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Low : R'])
plt.show()

#print decision boundry of SVM for testing 3 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of Test SVM OVR_3 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovr_3['PEG'], x_test_ovr_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_3.fit(x_train_ovr_3, y_train_ovr_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovr_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Low : R'])
plt.show()

#calculate accuracy of class 3
score_3 = svm_ovr_3.score(x_test_ovr_3,y_test_ovr_3)

#print accuracy
score_3

"""#One-vs-the-rest (OvR) for class 4"""

#training data for ovr 4
x_train_ovr_4 = df_1[['PEG','LPR']]
y_train_ovr_4 = df_1['UNS'].map({4 : 0, 3 : 1, 2 : 0, 1 : 0})

#testing data for ovr 3
x_test_ovr_4 = df_test_1[['PEG','LPR']]
y_test_ovr_4 = df_test_1[' UNS'].map({4 : 0, 3 : 1, 2 : 0, 1 : 0})

svm_ovr_4 = SVC()
svm_ovr_4.fit(x_train_ovr_4,y_train_ovr_4)

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for training 4 dataset
print(classification_report(y_train_ovr_4,svm_ovr_4.predict(x_train_ovr_4)))

#print the classification report of One-vs-the-rest (OvR) multiclass strategy for testing 4 dataset
print(classification_report(y_test_ovr_4,svm_ovr_4.predict(x_test_ovr_4)))

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for training 4 dataset
plot_confusion_matrix(svm_ovr_4,x_train_ovr_4,y_train_ovr_4)

#print the confusion matrix of One-vs-the-rest (OvR) multiclass strategy for testing 4 dataset
plot_confusion_matrix(svm_ovr_4,x_test_ovr_4,y_test_ovr_4)

#print decision boundry of SVM for training 4 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm train OVR_4 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovr_4['PEG'], x_train_ovr_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_4.fit(x_train_ovr_4, y_train_ovr_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovr_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Middle : R'])
plt.show()

#print decision boundry of SVM for testing 4 dataset for One-vs-the-rest (OvR) multiclass strategy
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of Test SVM OVR_4 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovr_4['PEG'], x_test_ovr_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovr_4.fit(x_train_ovr_4, y_train_ovr_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovr_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['All : other' ,'Middle : R'])
plt.show()

#calculate accuracy of class 4
score_4 = svm_ovr_4.score(x_test_ovr_4,y_test_ovr_4)

#print accuracy
score_4

# Model_1 : High , Model_2 : Middle , Model_3 : Low , Model_4 : Very_low
def actualclass_svm_ovr(x_test):

  result = ['High','Very Low','Low','Middle']
  arg = np.argmax([svm_ovr_1.predict(x_test),svm_ovr_2.predict(x_test),svm_ovr_3.predict(x_test),svm_ovr_4.predict(x_test)])

  return result[arg]

actualclass_svm_ovr([[0.8,0.9]])

actualclass_svm_ovr([[0.1,0.1]])

actualclass_svm_ovr([[0.5,0.6]])

actualclass_svm_ovr([[0.4,0.5]])

svm_ovr_proba_1 = SVC(probability=True)
svm_ovr_proba_1.fit(x_train_ovr_1,y_train_ovr_1)
svm_ovr_proba_2 = SVC(probability=True)
svm_ovr_proba_2.fit(x_train_ovr_1,y_train_ovr_2)
svm_ovr_proba_3 = SVC(probability=True)
svm_ovr_proba_3.fit(x_train_ovr_1,y_train_ovr_3)
svm_ovr_proba_4 = SVC(probability=True)
svm_ovr_proba_4.fit(x_train_ovr_4,y_train_ovr_4)

def actualclass_prob(model_1,model_2,model_3,model_4,x_test):
  prob_1 = model_1.predict_proba(x_test)[:,1].reshape(-1,1)
  prob_2 = model_2.predict_proba(x_test)[:,1].reshape(-1,1)
  prob_3 = model_3.predict_proba(x_test)[:,1].reshape(-1,1)
  prob_4 = model_4.predict_proba(x_test)[:,1].reshape(-1,1)

  y = np.hstack((prob_1,prob_2,prob_3,prob_4))

  return np.argmax(y,axis = 1)

y_pridect = actualclass_prob(svm_ovr_proba_1,svm_ovr_proba_2,svm_ovr_proba_3,svm_ovr_proba_4,x_test)

y_pridect

y = []
for i in y_test:
  if i == 4:
    y.append(0)
  else:
    y.append(i)  

y = np.array(y)
y

from sklearn.metrics import accuracy_score
print('accuracy = ', accuracy_score(y_pridect,y))

y_true_p = y ==y_pridect

plt.scatter(x_test['LPR'],x_test['PEG'],c = y_true_p )
plt.title('Correct Vs UnCorrect label ')
plt.xlabel('LPR')
plt.ylabel('PEG')
plt.legend(labels = ['Correct :Yellow'])

"""##In OVR the accuarcy in all probabilities was very good , less accuarcy in probability-4 with class middle vs. low ,it is 79% in train and 92% in test and the accuracy in class "Middle" 89% in train and 85% in test becouse the classes "Very-Low" and "Middle" are so close with other classes so it cannot be separated in some data. but the accuracy in class "High" and "Low" are so well.

# another solution for OVR

#One-vs-the-rest (OvR) for class 1
"""

svm_other_1 = SVC(kernel='linear', decision_function_shape='ovr', C=1)
svm_other_1.fit(x_train,y_train)

#print the classification report of SVM classifier for training 1 dataset
print(classification_report(y_train,svm_other_1.predict(x_train)))

#print the classification report of SVM classifier for testing 1 dataset
print(classification_report(y_test,svm_other_1.predict(x_test)))

#show the confusion matrix of SVM classifier for training 1 dataset
plot_confusion_matrix(svm_other_1,x_train,y_train)

#show the confusion matrix of SVM classifier for testing 1 dataset
plot_confusion_matrix(svm_other_1,x_test,y_test)

#print decision boundry of SVM for training OVR1 dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other train OVR_1 ')
# Set-up grid for plotting.
X0, X1 = x_train['PEG'], x_train['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_1.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

#print decision boundry of SVM for testing OVR1 dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other test OVR_1 ')
# Set-up grid for plotting.
X0, X1 = x_test['PEG'], x_test['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_1.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

"""#One-vs-the-rest (OvR) for class 2"""

svm_other_2 = SVC(kernel='poly', decision_function_shape='ovr', C=1)
svm_other_2.fit(x_train,y_train)

#print the classification report of SVM classifier for training OVR2 dataset
print(classification_report(y_train,svm_other_2.predict(x_train)))

#print the classification report of SVM classifier for testing OVR2 dataset
print(classification_report(y_test,svm_other_2.predict(x_test)))

#print decision boundry of SVM for training OVR2 dataset
plot_confusion_matrix(svm_other_2,x_train,y_train)

#print decision boundry of SVM for testing OVR2 dataset
plot_confusion_matrix(svm_other_2,x_test,y_test)

#print decision boundry of SVM for training OVR2 dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other_2 poly kernal train OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_train['PEG'], x_train['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_2.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

#print decision boundry of SVM for testing OVR2 dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other poly kernal test OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_test['PEG'], x_test['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_2.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

"""#One-vs-the-rest (OvR) for class 3"""

svm_other_3 = SVC(kernel='rbf', decision_function_shape='ovr', C=1)
svm_other_3.fit(x_train,y_train)

#print the classification report of SVM classifier for training dataset
print(classification_report(y_train,svm_other_3.predict(x_train)))

#print the classification report of SVM classifier for testing dataset
print(classification_report(y_test,svm_other_3.predict(x_test)))

#print decision boundry of SVM for training dataset
plot_confusion_matrix(svm_other_3,x_train,y_train)

#print decision boundry of SVM for testing dataset
plot_confusion_matrix(svm_other_3,x_test,y_test)

#print decision boundry of SVM for training dataset OVR3
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other_3 rbf kernal train OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_train['PEG'], x_train['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_3.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

#print decision boundry of SVM for testing dataset OVR3
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm_other_3 rbf kernal tes OVR_2 ')
# Set-up grid for plotting.
X0, X1 = x_test['PEG'], x_test['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_other_3.fit(x_train, y_train), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Other : All'])
plt.show()

most_model_fited = np.argmax([svm_other_1.score(x_test,y_test),svm_other_2.score(x_test,y_test),svm_other_3.score(x_test,y_test)])

most_model_fited # Model 3 has the best accuracy on testing data

"""# problem 3: Implement OneVsOne Classifier"""

df_2 = df[((df['UNS']== 4) | (df['UNS']==3))]

#print the dataset
df_2

#prepare testing dataset
df_test_2 = df_test[((df_test[' UNS']==4)| (df_test[' UNS']==3))]

#print testing dataset
df_test_2

#prepare traing dataset for OVO classification
x_train_ovo = df_2[['PEG','LPR']]
y_train_ovo = df_2['UNS'].map({4 : 1,  3 : 0})

#prepare testing dataset for OVO classification
x_test_ovo = df_test_2[['PEG','LPR']]
y_test_ovo = df_test_2[' UNS'].map({4 : 1,  3 : 0})

"""#Implementing OVO with SVM model High vs. Middle"""

svm_ovo = SVC()# High vs Low
svm_ovo.fit(x_train_ovo,y_train_ovo)

#print the classification report of SVM OVO for tarining dataset
print(classification_report(y_train_ovo,svm_ovo.predict(x_train_ovo)))

#print the classification report of SVM OVO for testing dataset
print(classification_report(y_test_ovo,svm_ovo.predict(x_test_ovo)))

#print the confusion matrix of SVM OVO for tarining dataset
plot_confusion_matrix(svm_ovo,x_train_ovo,y_train_ovo)

#print the confusion matrix of SVM OVO for testing dataset
plot_confusion_matrix(svm_ovo,x_test_ovo,y_test_ovo)

#print decision boundry of SVM OVO for tarining dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm rbf kernal train OVO ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo['PEG'], x_train_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middel : blue'])
plt.show()

#print decision boundry of SVM OVO for testing dataset
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of svm rbf kernal test OVO ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo['PEG'], x_test_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middel : blue'])
plt.show()

"""#Implementing OVO with logistic regression model  High vs. Middle"""

from sklearn.linear_model import LogisticRegression #to import logistic regression classifier
lr_ovo = LogisticRegression()
lr_ovo.fit(x_train_ovo,y_train_ovo)

#print the classification report of logistic regression classifier for training OVO dataset
print(classification_report(y_train_ovo,lr_ovo.predict(x_train_ovo)))

#print the classification report of logistic regression classifier for testing OVO dataset
print(classification_report(y_test_ovo,lr_ovo.predict(x_test_ovo)))

#print the confusion matrix of logistic regression classifier for training OVO dataset
plot_confusion_matrix(lr_ovo,x_train_ovo,y_train_ovo)

#print the confusion matrix of logistic regression classifier for testing OVO dataset
plot_confusion_matrix(lr_ovo,x_test_ovo,y_test_ovo)

#print decision boundry of logistic regression classifier for training OVO dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo['PEG'], x_train_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middel : blue'])
plt.show()

#print decision boundry of logistic regression classifier for testing OVO dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR test OVO ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo['PEG'], x_test_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middel : blue'])
plt.show()

"""#Implementing OVO with MLP classifier High vs. Middle"""

pc_ovo = MLPClassifier()
pc_ovo.fit(x_train_ovo,y_train_ovo)

#print the classification report of MLP classifier for training OVO dataset
print(classification_report(y_train_ovo,pc_ovo.predict(x_train_ovo)))

#print the classification report of MLP classifier for testing OVO dataset
print(classification_report(y_test_ovo,pc_ovo.predict(x_test_ovo)))

#print the confusion matrix of MLP classifier for training OVO dataset
plot_confusion_matrix(pc_ovo,x_train_ovo,y_train_ovo)

#print the confusion matrix of MLP classifier for testing OVO dataset
plot_confusion_matrix(pc_ovo,x_test_ovo,y_test_ovo)

#print decision boundry of MLP classifier for training OVO dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo['PEG'], x_train_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middel : blue'])
plt.show()

#print decision boundry of MLP classifier for testing OVO dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP test OVO ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo['PEG'], x_test_ovo['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo.fit(x_train_ovo, y_train_ovo), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Middle : blue'])
plt.show()

"""#Implement OVO1 with SVM High Vs. low"""

df_3 = df[((df['UNS']== 4) | (df['UNS']==2))]

df_test_3 = df_test[((df_test[' UNS']==4)| (df_test[' UNS']==2))]

#training data for OVO1
x_train_ovo_1 = df_3[['PEG','LPR']]
y_train_ovo_1 = df_3['UNS'].map({4 : 1,  2 : 0})

#testing data for OVO1
x_test_ovo_1 = df_test_3[['PEG','LPR']]
y_test_ovo_1 = df_test_3[' UNS'].map({4 : 1,  2 : 0})

svm_ovo_1 = SVC() # Middle Vs Low
svm_ovo_1.fit(x_train_ovo_1,y_train_ovo_1)

#print classification report for training data fo SVM classifier for OVO1
print(classification_report(y_train_ovo_1,svm_ovo_1.predict(x_train_ovo_1)))

#print classification report for testing data fo SVM classifier for OVO1
print(classification_report(y_test_ovo_1,svm_ovo_1.predict(x_test_ovo_1)))

#print confusion matrix for training data fo SVM classifier for OVO1
plot_confusion_matrix(svm_ovo_1,x_train_ovo_1,y_train_ovo_1)

#print confusion matrix for testing data fo SVM classifier for OVO1
plot_confusion_matrix(svm_ovo_1,x_test_ovo_1,y_test_ovo_1)

#print decision boundry of SVM classifier for training OVO 1 dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  train OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_1['PEG'], x_train_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Low : blue'])
plt.show()

#print decision boundry of SVM classifier for testing OVO 1 dataset 
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  test OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_1['PEG'], x_test_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,' Low : blue'])
plt.show()

"""#Implement OVO1 with logistic regression High Vs. low"""

lr_ovo_1 = LogisticRegression()
lr_ovo_1.fit(x_train_ovo_1,y_train_ovo_1)

#print classification report for training data fo logistic regression classifier for OVO1
print(classification_report(y_train_ovo_1,lr_ovo_1.predict(x_train_ovo_1)))

#print classification report for testing data fo logistic regression classifier for OVO1
print(classification_report(y_test_ovo_1,lr_ovo_1.predict(x_test_ovo_1)))

#print confusion matrix for training data fo LR classifier for OVO1
plot_confusion_matrix(lr_ovo_1,x_train_ovo_1,y_train_ovo_1)

#print confusion matrix for testing data fo LR classifier for OVO1
plot_confusion_matrix(lr_ovo_1,x_test_ovo_1,y_test_ovo_1)

#print Decision boundry for training data fo LR classifier for OVO1
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_1['PEG'], x_train_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Low : blue'])
plt.show()

#print Decision boundry for testing data fo LR classifier for OVO1
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  test OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_1['PEG'], x_test_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Low : blue'])
plt.show()

"""#Implemnt OVO1 with MLP classifier High Vs. low"""

pc_ovo_1 = MLPClassifier()
pc_ovo_1.fit(x_train_ovo_1,y_train_ovo_1)

#print classification report for training data fo MLP classifier for OVO1
print(classification_report(y_train_ovo_1,pc_ovo_1.predict(x_train_ovo_1)))

#print classification report for testing data fo MLP classifier for OVO1
print(classification_report(y_test_ovo_1,pc_ovo_1.predict(x_test_ovo_1)))

#print confusion matrix for training data fo MLP classifier for OVO1
plot_confusion_matrix(pc_ovo_1,x_train_ovo_1,y_train_ovo_1)

#print confusion matrix for testing data fo MLP classifier for OVO1
plot_confusion_matrix(pc_ovo_1,x_test_ovo_1,y_test_ovo_1)

#print Decision boundry for training data fo MLP classifier for OVO1
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_1['PEG'], x_train_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Low : blue'])
plt.show()

#print Decision boundry for testing data fo MLP classifier for OVO1
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  test OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_1['PEG'], x_test_ovo_1['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_1.fit(x_train_ovo_1, y_train_ovo_1), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_1, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Low : blue'])
plt.show()

"""#Implementing SVM OVO3 High vs. very-low"""

df_4 = df[((df['UNS']== 4) | (df['UNS']== 1))]

df_test_4 = df_test[((df_test[' UNS']== 4)| (df_test[' UNS']== 1))]

x_train_ovo_3 = df_4[['PEG','LPR']]
y_train_ovo_3 = df_4['UNS'].map({4 : 1,  1 : 0})

x_test_ovo_3 = df_test_4[['PEG','LPR']]
y_test_ovo_3 = df_test_4[' UNS'].map({4 : 1,  1 : 0})

svm_ovo_3 = SVC() # Midle Vs HIGH
svm_ovo_3.fit(x_train_ovo_3,y_train_ovo_3)

#print classification_report for training data fo SVM classifier for OVO
print(classification_report(y_train_ovo_3,svm_ovo_3.predict(x_train_ovo_3)))

#print classification_report for testing data fo SVM classifier for OVO
print(classification_report(y_test_ovo_3,svm_ovo_3.predict(x_test_ovo_3)))

#print confusion matrix for training data fo SVM classifier for OVO
plot_confusion_matrix(svm_ovo_3,x_train_ovo_3,y_train_ovo_3)

#print confusion matrix for testing data fo SVM classifier for OVO
plot_confusion_matrix(svm_ovo_3,x_test_ovo_3,y_test_ovo_3)

#show Decision boundry of SVM  train OVO_2
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  train OVO_2 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_3['PEG'], x_train_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of SVM  test OVO_2
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  test OVO_2 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_3['PEG'], x_test_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

"""#Implementing LR OVO3 High vs. very-low


"""

lr_ovo_3 = LogisticRegression()
lr_ovo_3.fit(x_train_ovo_3,y_train_ovo_3)

#print classification_report for training data fo LR classifier for OVO
print(classification_report(y_train_ovo_3,lr_ovo_3.predict(x_train_ovo_3)))

#print classification_report for testing data fo LR classifier for OVO
print(classification_report(y_test_ovo_3,lr_ovo_3.predict(x_test_ovo_3)))

#print confusion_matrix for training data fo LR classifier for OVO
plot_confusion_matrix(lr_ovo_3,x_train_ovo_3,y_train_ovo_3)

#print confusion_matrix for testing data fo LR classifier for OVO
plot_confusion_matrix(lr_ovo_3,x_test_ovo_3,y_test_ovo_3)

#show Decision boundry of LR  train OVO
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO_2 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_3['PEG'], x_train_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of LR  test OVO
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  test OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_3['PEG'], x_test_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

"""#Implement MLP classifier for OVO3 High vs. very-low"""

pc_ovo_3 = MLPClassifier()
pc_ovo_3.fit(x_train_ovo_3,y_train_ovo_3)

#print classification_report of  MLP classifier for OVO middle Vs. High for training data
print(classification_report(y_train_ovo_3,pc_ovo_3.predict(x_train_ovo_3)))

#print classification_report of  MLP classifier for OVO middle Vs. High for testing data
print(classification_report(y_test_ovo_3,pc_ovo_3.predict(x_test_ovo_3)))

#print confusion_matrix of  MLP classifier for OVO middle Vs. High for training data
plot_confusion_matrix(pc_ovo_3,x_train_ovo_3,y_train_ovo_3)

#print confusion_matrix of  MLP classifier for OVO middle Vs. High for testing data
plot_confusion_matrix(pc_ovo_3,x_test_ovo_3,y_test_ovo_3)

#show Decision boundry of MLP  train OVO
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO_2 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_3['PEG'], x_train_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of MLP test OVO
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of ML  test OVO_1 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_3['PEG'], x_test_ovo_3['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_3.fit(x_train_ovo_3, y_train_ovo_3), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_3, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['High : RED' ,'Very Low : blue'])
plt.show()

"""#Implement SVM classifier for OVO_4 Middle vs. low"""

df_5 = df[((df['UNS']== 3) | (df['UNS']== 2))]

df_test_5 = df_test[((df_test[' UNS']== 3)| (df_test[' UNS']== 2))]

x_train_ovo_4 = df_5[['PEG','LPR']]
y_train_ovo_4 = df_5['UNS'].map({3 : 1,  2 : 0})

x_test_ovo_4 = df_test_5[['PEG','LPR']]
y_test_ovo_4 = df_test_5[' UNS'].map({3 : 1,  2 : 0})

svm_ovo_4 = SVC() 
svm_ovo_4.fit(x_train_ovo_4,y_train_ovo_4)

#print classification_report for SVM model on training OVO4 dataset
print(classification_report(y_train_ovo_4,svm_ovo_4.predict(x_train_ovo_4)))

#print classification_report for SVM model on testing OVO4 dataset
print(classification_report(y_test_ovo_4,svm_ovo_4.predict(x_test_ovo_4)))

#print confusion matrix for SVM model on training OVO4 dataset
plot_confusion_matrix(svm_ovo_4,x_train_ovo_4,y_train_ovo_4)

#print confusion matrix for SVM model on testing OVO4 dataset
plot_confusion_matrix(svm_ovo_4,x_test_ovo_4,y_test_ovo_4)

#show Decision boundry of SVM  train OVO_4
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  train OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_4['PEG'], x_train_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

#show Decision boundry of SVM  test OVO_4
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  test OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_4['PEG'], x_test_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

"""#Implement LR classifier for OVO_4 Middle vs. low"""

lr_ovo_4 = LogisticRegression()
lr_ovo_4.fit(x_train_ovo_4,y_train_ovo_4)

#print classification_report for LR model on training OVO4 dataset
print(classification_report(y_train_ovo_4,lr_ovo_4.predict(x_train_ovo_4)))

#print classification_report for LR model on testing OVO4 dataset
print(classification_report(y_test_ovo_4,lr_ovo_4.predict(x_test_ovo_4)))

#print confusion matrix for LR model on training OVO4 dataset
plot_confusion_matrix(lr_ovo_4,x_train_ovo_4,y_train_ovo_4)

#print confusion matrix for LR model on testing OVO4 dataset
plot_confusion_matrix(lr_ovo_4,x_test_ovo_4,y_test_ovo_4)

#SHOW Decision boundry of LR  train OVO_4
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_4['PEG'], x_train_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

#show Decision boundry of LR  test OVO_3
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  test OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_4['PEG'], x_test_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

"""#Implement MLP classifier for OVO_4 Middle vs. low

"""

pc_ovo_4 = MLPClassifier()
pc_ovo_4.fit(x_train_ovo_4,y_train_ovo_4)

#print classification_report for MLP model on training OVO4 dataset
print(classification_report(y_train_ovo_4,pc_ovo_4.predict(x_train_ovo_4)))

#print classification_report for MLP model on testing OVO4 dataset
print(classification_report(y_test_ovo_4,pc_ovo_4.predict(x_test_ovo_4)))

#print confusion_matrix for MLP model on training OVO4 dataset
plot_confusion_matrix(pc_ovo_4,x_train_ovo_4,y_train_ovo_4)

#print confusion_matrix for MLP model on testing OVO4 dataset
plot_confusion_matrix(pc_ovo_4,x_test_ovo_4,y_test_ovo_4)

#show Decision boundry of MLP  train OVO_4
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_4['PEG'], x_train_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

#show Decision boundry of MLp  test OVO_4
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  test OVO_4 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_4['PEG'], x_test_ovo_4['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_4.fit(x_train_ovo_4, y_train_ovo_4), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_4, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Low : blue'])
plt.show()

"""#Implement SVM classifier for OVO_5 Middle vs. very-low

"""

df_6 = df[((df['UNS']== 3) | (df['UNS']== 1))]

df_test_6 = df_test[((df_test[' UNS']== 3)| (df_test[' UNS']== 1))]

x_train_ovo_5 = df_6[['PEG','LPR']]
y_train_ovo_5 = df_6['UNS'].map({3 : 1,  1 : 0})

x_test_ovo_5 = df_test_6[['PEG','LPR']]
y_test_ovo_5 = df_test_6[' UNS'].map({3 : 1,  1 : 0})

svm_ovo_5 = SVC() 
svm_ovo_5.fit(x_train_ovo_5,y_train_ovo_5)

#print classification_report of SVM model for training dataset OVO5
print(classification_report(y_train_ovo_5,svm_ovo_5.predict(x_train_ovo_5)))

#print classification_report of SVM model for testing dataset OVO5
print(classification_report(y_test_ovo_5,svm_ovo_5.predict(x_test_ovo_5)))

#print confusion_matrix of SVM model for training dataset OVO5
plot_confusion_matrix(svm_ovo_5,x_train_ovo_5,y_train_ovo_5)

#print confusion_matrix of SVM model for testing dataset OVO5
plot_confusion_matrix(svm_ovo_5,x_test_ovo_5,y_test_ovo_5)

#show Decision boundry of SVM  train OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  train OVO_5 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_5['PEG'], x_train_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of SVM  test OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  test OVO_5 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_5['PEG'], x_test_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

"""#Implement LR classifier for OVO_5 Middle vs. very-low"""

lr_ovo_5 = LogisticRegression()
lr_ovo_5.fit(x_train_ovo_5,y_train_ovo_5)

#print classification_report of LR model for training dataset OVO5
print(classification_report(y_train_ovo_5,lr_ovo_5.predict(x_train_ovo_5)))

#print classification_report of LR model for testing dataset OVO5
print(classification_report(y_test_ovo_5,lr_ovo_5.predict(x_test_ovo_5)))

#print confusion_matrix of LR model for training dataset OVO5
plot_confusion_matrix(lr_ovo_5,x_train_ovo_5,y_train_ovo_5)

#print confusion_matrix of LR model for testing dataset OVO5
plot_confusion_matrix(lr_ovo_5,x_test_ovo_5,y_test_ovo_5)

#show Decision boundry of LR  train OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO_4')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_5['PEG'], x_train_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of LR  test OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  test OVO_5 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_5['PEG'], x_test_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

"""#Implement MLP classifier for OVO_5 Middle vs. very-low"""

pc_ovo_5 = MLPClassifier()
pc_ovo_5.fit(x_train_ovo_5,y_train_ovo_5)

#print classification_report of MLP model for training dataset OVO5
print(classification_report(y_train_ovo_5,pc_ovo_5.predict(x_train_ovo_5)))

#print classification_report of MLP model for testing dataset OVO5
print(classification_report(y_test_ovo_5,pc_ovo_5.predict(x_test_ovo_5)))

#print confusion_matrix of MLP model for training dataset OVO5
plot_confusion_matrix(pc_ovo_5,x_train_ovo_5,y_train_ovo_5)

#print confusion_matrix of MLP model for testing dataset OVO5
plot_confusion_matrix(pc_ovo_5,x_test_ovo_5,y_test_ovo_5)

#show Decision boundry of MLP  train OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO_5 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_5['PEG'], x_train_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of ML  test OVO_5
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of ML  test OVO_5 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_5['PEG'], x_test_ovo_5['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_5.fit(x_train_ovo_5, y_train_ovo_5), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_5, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Middle : RED' ,'Very Low : blue'])
plt.show()

"""#Implementing SVM model on OVO6 Low vs. very-low"""

df_7 = df[((df['UNS']== 2) | (df['UNS']== 1))]

df_test_7 = df_test[((df_test[' UNS']== 2)| (df_test[' UNS']== 1))]

x_train_ovo_6 = df_7[['PEG','LPR']]
y_train_ovo_6 = df_7['UNS'].map({2 : 1,  1 : 0})

x_test_ovo_6 = df_test_7[['PEG','LPR']]
y_test_ovo_6 = df_test_7[' UNS'].map({2 : 1,  1 : 0})

svm_ovo_6 = SVC() 
svm_ovo_6.fit(x_train_ovo_6,y_train_ovo_6)

#print classification report for SVM model for OVO6 training dataset
print(classification_report(y_train_ovo_6,svm_ovo_6.predict(x_train_ovo_6)))

#print classification report for SVM model for OVO6 testing dataset
print(classification_report(y_test_ovo_6,svm_ovo_6.predict(x_test_ovo_6)))

#print confusion matrix for SVM model for OVO6 training dataset
plot_confusion_matrix(svm_ovo_6,x_train_ovo_6,y_train_ovo_6)

#print confusion matrix for SVM model for OVO6 testing dataset
plot_confusion_matrix(svm_ovo_6,x_test_ovo_6,y_test_ovo_6)

#show Decision boundry of SVM  train OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  train OVO_6 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_6['PEG'], x_train_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of SVM  test OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of SVM  test OVO_6 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_6['PEG'], x_test_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, svm_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

"""#Implementing LR model on OVO6 Low vs. very-low"""

lr_ovo_6 = LogisticRegression()
lr_ovo_6.fit(x_train_ovo_6,y_train_ovo_6)

#print classification report for LR model for OVO6 training dataset
print(classification_report(y_train_ovo_6,lr_ovo_6.predict(x_train_ovo_6)))

#print classification report for LR model for OVO6 training dataset
print(classification_report(y_test_ovo_6,lr_ovo_6.predict(x_test_ovo_6)))

#print confusion matrix for LR model for OVO6 training dataset
plot_confusion_matrix(lr_ovo_6,x_train_ovo_6,y_train_ovo_6)

#print confusion matrix for LR model for OVO6 testing dataset
plot_confusion_matrix(lr_ovo_6,x_test_ovo_6,y_test_ovo_6)

#show Decision boundry of LR  train OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  train OVO_6')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_6['PEG'], x_train_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of LR test OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of LR  test OVO_6 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_6['PEG'], x_test_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, lr_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

"""#Implementing MLP classifier of OVO6 Low vs. very-low"""

pc_ovo_6 = MLPClassifier()
pc_ovo_6.fit(x_train_ovo_6,y_train_ovo_6)

#print classification report for MLP model for OVO6 training dataset
print(classification_report(y_train_ovo_6,pc_ovo_6.predict(x_train_ovo_6)))

#print classification report for MLP model for OVO6 testing dataset
print(classification_report(y_test_ovo_6,pc_ovo_6.predict(x_test_ovo_6)))

#print confusion matrix for MLP model for OVO6 training dataset
plot_confusion_matrix(pc_ovo_6,x_train_ovo_6,y_train_ovo_6)

#print confusion matrix for MLP model for OVO6 testing dataset
plot_confusion_matrix(pc_ovo_6,x_test_ovo_6,y_test_ovo_6)

#show Decision boundry of MLP  train OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of MLP  train OVO_6 ')
# Set-up grid for plotting.
X0, X1 = x_train_ovo_6['PEG'], x_train_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_train_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

#show Decision boundry of ML  test OVO_6
fig, ax = plt.subplots()
# title for the plots
title = ('Decision boundry of ML  test OVO_6 ')
# Set-up grid for plotting.
X0, X1 = x_test_ovo_6['PEG'], x_test_ovo_6['LPR']
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, pc_ovo_6.fit(x_train_ovo_6, y_train_ovo_6), xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=y_test_ovo_6, cmap=plt.cm.coolwarm, s=30, edgecolors='black')
ax.set_ylabel('LPR')
ax.set_xlabel('PEG')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend(labels = ['Low : RED' ,'Very Low : blue'])
plt.show()

"""##In OVO the accuarcy in all probabilities was very good , less accuarcy in probability-4 with class middle vs. low ,it is 85% becouse the two classes are so close to each other that in some data of two classes cannot be separated,but all accuarcy probabilities is well and the data split is well.

# arg max for SVM-OVO
"""

def actualclass_svm(x_test):
  result=['High','High','High','Middle','Middle','Low','Very Low']
  arg_index = np.argmax([svm_ovo.predict(x_test),svm_ovo_1.predict(x_test),svm_ovo_3.predict(x_test),svm_ovo_4.predict(x_test),svm_ovo_5.predict(x_test),svm_ovo_6.predict(x_test)])
  
  return result[arg_index]

#use any variables as a parameter in actualclass_svm function to sure that it work well
actualclass_svm([[0.3,0.1]])

actualclass_svm([[0.4,0.5]])

actualclass_svm([[0.8,0.7]])

#the probabilites of all six probability of OVO
svm_ovo_prob_1 = SVC(probability=True) 
svm_ovo_prob_1.fit(x_train_ovo,y_train_ovo)
svm_ovo_prob_2 = SVC(probability=True) 
svm_ovo_prob_2.fit(x_train_ovo_1,y_train_ovo_1)
svm_ovo_prob_3 = SVC(probability=True) 
svm_ovo_prob_3.fit(x_train_ovo_3,y_train_ovo_3)
svm_ovo_prob_4 = SVC(probability=True) 
svm_ovo_prob_4.fit(x_train_ovo_4,y_train_ovo_4)
svm_ovo_prob_5 = SVC(probability=True) 
svm_ovo_prob_5.fit(x_train_ovo_5,y_train_ovo_5)
svm_ovo_prob_6 = SVC(probability=True) 
svm_ovo_prob_6.fit(x_train_ovo_6,y_train_ovo_6)

#function for predicting the probabilities of OVO classes
def actualclass_prob(model_1,model_2,model_3,model_4,model_5,model_6,x_test):
  prob_1 = model_1.predict_proba(x_test) #1-h  0- m
  prob_2 = model_2.predict_proba(x_test) #1-h  0 -l
  prob_3 = model_3.predict_proba(x_test) #1-h  0-vl
  prob_4 = model_4.predict_proba(x_test) #1-m  0- l
  prob_5 = model_5.predict_proba(x_test) #1-m  0-vl
  prob_6 = model_6.predict_proba(x_test) #1-l  0-vl
  
  high = np.hstack((prob_1[:,1].reshape(-1,1),prob_2[:,1].reshape(-1,1),prob_3[:,1].reshape(-1,1)))
  middle = np.hstack((prob_1[:,0].reshape(-1,1),prob_4[:,1].reshape(-1,1),prob_5[:,1].reshape(-1,1)))
  low = np.hstack((prob_2[:,0].reshape(-1,1),prob_4[:,0].reshape(-1,1),prob_6[:,1].reshape(-1,1)))
  very_low = np.hstack((prob_3[:,0].reshape(-1,1),prob_5[:,0].reshape(-1,1),prob_6[:,0].reshape(-1,1)))
  result = [4,3,2,1]
  sum_high = np.sum(high,axis = 1).reshape(-1,1)
  sum_middle = np.sum(middle,axis = 1).reshape(-1,1)
  sum_low = np.sum(low,axis = 1).reshape(-1,1)
  sum_very_low = np.sum(very_low,axis = 1).reshape(-1,1)
  pred = np.hstack((sum_high,sum_middle,sum_low,sum_very_low))

  final = np.argmax(pred,axis= 1)
  y = []
  for i in final:
    if i==1:
      y.append(3)
    elif i ==3:
      y.append(1)
    elif i==0:
      y.append(4)
    else:
      y.append(i)
  final = np.array(y)    
  return final

y_pred = actualclass_prob(svm_ovo_prob_1,svm_ovo_prob_2,svm_ovo_prob_3,svm_ovo_prob_4,svm_ovo_prob_5,svm_ovo_prob_6,x_test)

#the accuracy of svm-ovo model
print("the accuracy  = " ,accuracy_score(y_pred,y_test))

y_true_p_1 = y_test==y_pred

#according to the higher accuracy,the model can predict the actual classes (yellow color) correctly, and another color(purple) means that it's not predicted correctly
plt.scatter(x_test['LPR'],x_test['PEG'],c = y_true_p_1 )
plt.title('Correct Vs UnCorrect label ')
plt.xlabel('LPR')
plt.ylabel('PEG')
plt.legend(labels = ['Correct :Yellow'])